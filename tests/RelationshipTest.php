<?php

require_once 'Neo4jRestTestCase.php';

use Neo4jRest\Neo4jRest_RequiredParameterException as 
   Neo4jRest_RequiredParameterException;
   
use Neo4jRest\Neo4jRest_NotFoundException as 
   Neo4jRest_NotFoundException;  

use Neo4jRest\Neo4jRest_InvalidParameterTypeException as 
   Neo4jRest_InvalidParameterTypeException;

use Neo4jRest\Node as Node;
use Neo4jRest\Relationship as Relationship;
   
/**
 * Test class for Relationship.
 * Generated by PHPUnit on 2011-04-22 at 19:10:17.
 */
class RelationshipTest extends Neo4jRestTestCase
{
    /**
     * @var Relationship
     */
    protected $rel;
    protected $relType = 'TEST';
    protected $startNode = null;
    protected $endNode = null;
    
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        parent::setUp();
        $this->startNode = new Node($this->graphDb);
        $this->startNode->save();
        $this->endNode = new Node($this->graphDb);
        $this->endNode->save();
        
        $this->rel = new Relationship($this->graphDb, 
           $this->startNode, $this->endNode, $this->relType);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        try {
            $this->startNode->delete();
            if ($this->endNode) {
                $this->endNode->delete();
            }
            if ($this->rel) {
                $this->rel->delete();
            }
        }
        catch(Exception $e ) {}
    }

    
    /**
     * 
     */
    public function test__Contruct()
    {
        
        $this->startNode = new Node($this->graphDb);
        $this->startNode->save();
        $this->endNode = new Node($this->graphDb);
        $this->endNode->save();

        // Empty relationship type.
        $gotError = FALSE;
        try {
            $this->rel = new Relationship($this->graphDb, 
               $this->startNode, $this->endNode, '');
        }
        catch (Neo4jRest_RequiredParameterException $e) {
            $gotError = TRUE;
        }
        
        $this->assertTrue($gotError, 'Empty string for parameter "type" for ' . 
        	   'a new Relationship ' . 
            'should throw Neo4jRest_RequiredParameterException.'
        );
        
        // Non-string relationship type.
        $gotError = FALSE;
        try {
            $this->rel = new Relationship($this->graphDb, 
               $this->startNode, $this->endNode, 15);
        }
        catch (Neo4jRest_InvalidParameterTypeException $e) {
            $gotError = TRUE;
        }
        
        $this->assertTrue($gotError, 'Non-string value for "type" parameter ' .
            'for new Relationship ' . 
            'should throw Neo4jRest_RequiredParameterException.'
        );
        
    }
    
    /**
     * 
     */
    public function testGetId()
    {
        
        $rel = $this->rel;    
        
        $this->assertInternalType('null', $rel->getId(), 
            'New Relationship should have Id of type "null"');
        
        $rel->save();
        $this->assertInternalType('string', $rel->getId(), 
            'Saved Relationship should have Id of type "string"');
        
        $rel->delete();
        $this->assertInternalType('null', $rel->getId(),
            'Deleted Relationship should have Id of type "null"');
        
        
    }

    /**
     *
     */
    public function testIsSaved()
    {
        $rel = $this->rel;
        
        $this->assertEquals(FALSE, $rel->isSaved(),
            'Newly created Relationship should not show status of "saved".');
        
        $rel->save();
        $this->assertEquals(TRUE, $rel->isSaved(),
            'Saved Relationship should show status of "saved"');

        $rel->delete();
        $this->assertEquals(FALSE, $rel->isSaved(),
            'Deleted Relationship should not show status of "saved"');
    }

    /**
     *
     */
    public function testGetType()
    {
        $rel = $this->rel;
        
        $this->assertEquals($this->relType, $rel->getType());
    }

    /**
     * 
     */
    public function testIsType()
    {
        $this->assertTrue($this->rel->isType($this->relType));
    }

    /**
     * @todo Implement testGetStartNode().
     */
    public function testGetStartNode()
    {
        $rel = $this->rel;
        
        $this->assertEquals($this->startNode, $rel->getStartNode());
    }

    /**
     * @todo Implement testGetEndNode().
     */
    public function testGetEndNode()
    {
        $rel = $this->rel;
        
        $this->assertEquals($this->endNode, $rel->getEndNode());
    }

    /**
     * 
     */
    public function testGetOtherNode()
    {
        $rel = $this->rel;
        
        $node = $rel->getOtherNode($this->startNode);
        $this->assertEquals($this->endNode, $node);
        
        $node = $rel->getOtherNode($this->endNode);
        $this->assertEquals($this->startNode, $node);
        
        $bogusNode = new Neo4jRest\Node($this->graphDb);
        $e = NULL;
        try {
            $node = $rel->getOtherNode($bogusNode);
        }
        catch (Neo4jRest_NotFoundException $e) {
        }
        $this->assertInstanceOf('Neo4jRest\Neo4jRest_NotFoundException', $e, 
            'getOtherNode using a node that is not in the Relationship ' .
            'should throw Neo4jRest_NotFoundException'
        );        
    }

    /**
     * 
     */
    public function testSave()
    {
        $rel = $this->rel;
        
        $rel->save();
        $this->assertEquals(TRUE, $rel->isSaved());
        
        // Add a property.  Should save properties to existing node in graph db.
        $prop1 = 'test';
        $rel->prop1 = 'test';
        $rel->save();
        
        $relRetrieved = $this->graphDb->getRelationshipbyId($rel->getId());
        $this->assertEquals($rel, $relRetrieved);
        $this->assertEquals($prop1, $relRetrieved->prop1);
    }

    /**
     * @todo Implement testDelete().
     */
    public function testDelete()
    {
        
        $rel = $this->rel;
        $id = $rel->getId();
        
        $rel->save();
        
        $rel->delete();
        
        $this->assertNull($rel->getId());
        $this->assertEquals(FALSE, $rel->isSaved());
        
        $gotNotFound = FALSE;
        try {
            $relDb = $this->graphDb->getRelationshipById($id);
        }
        catch(Neo4jRest_NotFoundException $e) {
            $this->assertEquals(404, $e->getCode());
            $gotNotFound = TRUE;
        }
        
        $this->assertTrue($gotNotFound, 'getRelationshipById should throw ' . 
        	'Neo4jRest_NotFoundException after Relatoinship is deleted');
        
    }

    /**
     * @todo Implement testGetUri().
     */
    public function testGetUri()
    {
        $uri = $this->rel->getUri();
        
        $this->assertInternalType('string', $uri);
        $this->assertStringStartsWith($this->graphDb->getBaseUri(), $uri);
    }

    /**
     * @todo Implement testInflateFromResponse().
     */
    public function testInflateFromResponse()
    {
        // Create a dummy response with some properties.
        $id = 10;
        $prop1 = 'prop1';
        $prop1val = 'prop1val';
        $prop2 = 'prop2';
        $prop2val = 'prop2val';
        $start = $this->startNode->getUri();
        $end = $this->endNode->getUri();
        $type = 'TEST TYPE';
        
        $response = array(
            'self' => $this->rel->getUri() . '/' . $id,
            'data' => array($prop1 => $prop1val, $prop2 => $prop2val),
            'start' => $start,
            'end' => $end,
            'type' => $type
        );        
        
        
        $rel = Relationship::inflateFromResponse($this->graphDb, 
           $response);
        
        $this->assertInstanceOf('Neo4jRest\Relationship', $rel);
        $this->assertTrue($rel->isSaved());
        $this->assertEquals($id, $rel->getId());
        $this->assertEquals($prop1val, $rel->prop1);
        $this->assertEquals($prop2val, $rel->prop2);
        $this->assertEquals($this->startNode, $rel->getStartNode());
        $this->assertEquals($this->endNode, $rel->getendNode());
        
    }
}
?>
