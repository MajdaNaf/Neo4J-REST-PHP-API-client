<?php

require_once 'Neo4jRestTestCase.php';

use Neo4jRest\Neo4jRest_NotFoundException as Neo4jRest_NotFoundException;
use Neo4jRest\Neo4jRest_HttpException as Neo4jRest_HttpException;

/**
 * Test class for NodeIndex.
 * Generated by PHPUnit on 2011-04-19 at 02:46:57.
 */
class RelationshipIndexTest extends Neo4jRestTestCase
{
    /**
     * @var NodeIndex
     */
    protected $index;
    protected $indexMgr;
    protected $indexName;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        parent::setUp();
        $this->indexName = 'TestIndex';
        $this->indexMgr = $this->graphDb->index();
        $this->index = $this->indexMgr->forRelationships($this->indexName);
        $this->startNode = new Neo4jRest\Node($this->graphDb);
        $this->startNode->save();
        $this->endNode = new Neo4jRest\Node($this->graphDb);
        $this->endNode->save();
        $this->relType = 'TestRelationshipType';
        $this->rel = new Neo4jRest\Relationship($this->graphDb, 
           $this->startNode, $this->endNode, $this->relType);
        $this->rel->save();
        
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->rel->delete();
        $this->startNode->delete();
        $this->endNode->delete();
    }

    /**
     * 
     */
    public function testGetEntityType()
    {
        $index = $this->index;
        
        $type = $index->getEntityType();
        
        $this->assertEquals('Neo4jRest\Relationship', $type);
    }
    
    /**
     * @todo Implement testAdd().
     */
    public function testAdd()
    {
        $rel = $this->rel;
        $key = mt_rand();
        $value = mt_rand();
        
        $this->index->add($rel, $key, $value);
        
        $rels = $this->index->get($key, $value);
        
        $this->assertEquals($rel, $rels[0]);
        
        // Clean up.
        $this->index->remove($rel, $key, $value);
        
    }

    /**
     * @todo Implement testRemove().
     */
    public function testRemove()
    {
        // We get the Relationship back before removing the index
        $rel = $this->rel;
        $key = mt_rand();
        $value = mt_rand();
        
        $this->index->add($rel, $key, $value);
        
        $rels = $this->index->get($key, $value);
        
        $this->assertEquals($rel, $rels[0]);
        
        // But not after.
        $this->index->remove($rel, $key, $value);

        try {
            $rels = $this->index->get($key, $value);
        }
        catch (Neo4jRest_NotFoundException $e) {
            $this->assertEquals(400, $e->getCode());
        }
        
        $this->assertInstanceOf('Neo4jRest\Neo4jRest_NotFoundException', $e);
        
        // Try the same using no value.
        // We get the Relationship back before removing the index
        $key = mt_rand();
        $value = mt_rand();
        
        $this->index->add($rel, $key, $value);
        
        $rels = $this->index->get($key, $value);
        
        $this->assertEquals($rel, $rels[0]);
        
        // But not after.
        $this->index->remove($rel, $key);

        try {
            $rels = $this->index->get($key, $value);
        }
        catch (Neo4jRest_NotFoundException $e) {
            $this->assertEquals(400, $e->getCode());
        }
        
        $this->assertInstanceOf('Neo4jRest\Neo4jRest_NotFoundException', $e);
        
        // Try the same using no key and no value
        // We get the Relationship back before removing the index
        $key = mt_rand();
        $value = mt_rand();
        
        $this->index->add($rel, $key, $value);
        
        $rels = $this->index->get($key, $value);
        
        $this->assertEquals($rel, $rels[0]);
        
        // But not after.
        $this->index->remove($rel);

        try {
            $rels = $this->index->get($key, $value);
        }
        catch (Neo4jRest_NotFoundException $e) {
            $this->assertEquals(400, $e->getCode());
        }
        
        $this->assertInstanceOf('Neo4jRest\Neo4jRest_NotFoundException', $e);
        
        // Try to test raising a general Http exception.
        $e = NULL;
        try {

            $relIndex = new MockRelationshipIndex($this->indexName, 
                $this->graphDb);
                      
            $relIndex->remove($rel, 'Key', 'Value');
        }
        catch (Neo4jRest_HttpException $e) {
        } 
        
        $this->assertInstanceOf('Neo4jRest\Neo4jRest_HttpException', $e);
        
        
        // Try to test raising a 404 Not Found exception.
        // TODO: Ooops REST API or documentation is broken.  Skip for now.
/*        
        $e = NULL;
        try {
            $this->index->remove($rel, 'bogus key', 'bogus value');
        }
        catch (Neo4jRest_NotFoundException $e) {
            $this->assertEquals(404, $e->getCode());
        }
        
        $this->assertInstanceOf('Neo4jRest_NotFoundException', $e);
*/        
                
    }

    /**
     * @todo Implement testGet().
     */
    public function testGet()
    {
        // Basic test case.
        $rel = $this->rel;
        $key = mt_rand();
        $value = mt_rand();
        
        $this->index->add($rel, $key, $value);
        
        $rels = $this->index->get($key, $value);

        $this->assertEquals($rel, $rels[0]);

        $this->index->remove($rel, $key, $value); // Clean up.
        
        // Male sure we generate a general Http exception if the uri
        // is bogus.
        $e = NULL;
        try {

            $relIndex = new MockRelationshipIndex($this->indexName, 
                $this->graphDb);
            $relIndex->get('Key', 'Value');
        }
        catch (Neo4jRest_HttpException $e) {
        }        
        
        $this->assertInstanceOf('Neo4jRest\Neo4jRest_HttpException', $e);        
        
    }

    /**
     * @todo Implement testQuery().
     */
    public function testQuery()
    {
        // Basic test case.
        $rel = $this->rel;
        $key = mt_rand();
        $value = 'A Test Relationship Val with Spaces';
        
        $this->index->add($rel, $key, $value);
        
        $rels = $this->index->query($key, 'A Test Relationship Val*');

        $this->assertEquals($rel, $rels[0]);

        $this->index->remove($rel, $key, $value); // Clean up.
        
        // Male sure we generate a general Http exception if the uri
        // is bogus.
        $e = NULL;
        try {

            $relIndex = new MockRelationshipIndex($this->indexName, 
                $this->graphDb);
            $relIndex->get('Key', 'Value');
        }
        catch (Neo4jRest_HttpException $e) {
        }        
        
        $this->assertInstanceOf('Neo4jRest\Neo4jRest_HttpException', $e);        
        
    }

    /**
     * @todo Implement testGetName().
     */
    public function testGetName()
    {
        $this->assertEquals($this->indexName, $this->index->getName());
    }                

    /**
     * 
     */
    public function testGetUri()
    {
        $uri = $this->index->getUri();
        
        $this->assertInternalType('string', $uri);
        $this->assertStringStartsWith($this->graphDb->getBaseUri(), $uri);
    }
}

/**
 * 
 * Mock object used to generate a general Http exception for Index 
 * based classes.
 * 
 * @author tchaffee
 *
 */
class MockRelationshipIndex extends Neo4jRest\RelationshipIndex {
    
    // Override the getUri function so it returns a bogus Uri.
    function getUri() {
        return 'x';
    }
}    

?>
